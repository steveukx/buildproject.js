
"use strict";

/**
 *
 * @param {String} sourcePath
 * @param {TaskRunner} taskRunner
 */
module.exports = function(sourcePath, targetPath, taskRunner) {

   var Commands = require('commands');

   if(Commands.get('processJavascript')) {
      (function() {
         var fs = require('fs'),
            sourceDir = sourcePath + Commands.get('jsSource', 'js').replace(/\/$/, '') + '/',
            outputFile = targetPath + Commands.get('jsOutput', 'js/scripts.js'),
            minifiedOutputFile = outputFile.replace(/\.js$/, '-min.js'),
            fileContent = '',
            sourceFiles,
            debugFileList = [],
            dependencies = [],
            dependencyContent = '',
            jsIncludeFilter = ['**.js'];

         if(Commands.get('jsIncludes')) {
            taskRunner.push(function(next) {
               fs.readFile(sourcePath + Commands.get('jsIncludes'), 'utf-8', function(err, data) {
                  if(err) { throw new Error(err); }
                  jsIncludeFilter = JSON.parse(data).include;
                  next();
               });
            }, 'Parsing JS filters file');
         }

         taskRunner.push(function(next) {
            sourceFiles = require('readdir').readSync(sourceDir, jsIncludeFilter);
            next();
         }, 'Scan for all JS files');

         if(Commands.get('remoteJs')) {
            taskRunner.push(function(next) {
               var remoteTaskRunner = new (require('task-runner').TaskRunner);
               [].concat(Commands.get('remoteJs')).forEach(function(url) {
                  remoteTaskRunner.push(function(next) {
                     require('xhrequest')(url, {
                        success: function(data) {
                           var baseName = require('path').basename(url);
                           dependencyContent += (dependencies[ baseName ] = data) + "\n\n";
                           fs.writeFile(targetPath + 'js/' + baseName, data, 'utf-8', next);
                           debugFileList.push(baseName);
                        },
                        error: function(e) {
                           throw new Error(e)
                        }
                     });
                  }, 'Fetching ' + url);
               });
               remoteTaskRunner.start(next);
            }, 'Fetch remote scripts');
         }

         taskRunner.push(function(next) {
            fileContent = [dependencyContent];
            sourceFiles.forEach(function(sourceFile) {
               console.log('    [CONCAT] ' + sourceFile);
               fileContent.push(fs.readFileSync(sourceDir + sourceFile, 'utf-8'));
               debugFileList.push(require('path').basename(sourceFile));
            });
            fileContent = fileContent.join('\n');
            fs.writeFile(outputFile, fileContent, 'utf-8', next);
         }, 'Concatenate JS files');

         taskRunner.push(function(next) {
            var debugFileTemplate = '{{#scripts}}document.write(decodeURIComponent("%3Cscript%20src%3D%22/js/{{source}}?' + Date.now() + '%22%3E%3C%2Fscript%3E"));\n{{/scripts}}';
            var scripts = {scripts: []};
            debugFileList.forEach(function(fileName) {scripts.scripts.push({source: fileName})});

            fs.writeFile(outputFile.replace('.js', '.debug.js'), require('hogan').compile(debugFileTemplate).render(scripts), 'utf-8', next);
         }, 'Save debug JS file list to ' + outputFile.replace('.js', '.debug.js'));

         taskRunner.push(function(next) {
            var jsp = require("uglify-js").parser,
               pro = require("uglify-js").uglify,
               ast;

            ast = jsp.parse(fileContent);   // parse code and get the initial AST
            ast = pro.ast_mangle(ast);      // get a new AST with mangled names
            ast = pro.ast_squeeze(ast);     // get an AST with compression optimizations

            fs.writeFile(minifiedOutputFile, pro.gen_code(ast), 'utf-8', next);
         }, 'Save minified JS file');
      }());
   }

};